[Lista]
normal = A1
anidada = A2
con-dict = B1

[ListComp]
normal = C1
anidada = C2
con-if = C1

[Dict]
normal = A2
anidada = B1
con-list = B1
con-dict-list = B2

[DictComp]
normal = C1
con-if = C2
con-if-else = C2
anidada = C2

[Tuple]
normal = A1
anidada = A2

[File]
open = A2
write = A2
writelines = A2
read = A2
readline = A2

[Print]
normal = A1

[Assign]
normal = A1
con-suma = A1
incrementos = A2

[If-Statements]
normal = A1
expression = B1
__name__ = B1

[Loop]
break = B1
continue = B1
pass = B1
while-normal = B1
while-else = B1
for-normal = A1
for-anidado = A2
for-tupla-nombre = A2
for-lista-iterar = A2
for-tupla-iterar = A2
range = A2
zip = C2
map = C2
enumerate = C2

[FuntionDef]
normal = A1
argum-default = A2
argum-* = B1
argum-** = B1
argum-Keyword-Only = B1
recursive = B1

[Return]
normal = A1

[Lambda]
normal = B1

[Generators]
function = C1
expression = C1

[Import]
import = A2
from-normal = A2
from-relative = B1
from-*statements = B1
as-extension = B1

[Modules]
struct = C1
pickle = C1
shelve = C1
dbm = C1
re = C1
importlib = C1

[Class]
normal = B1
heredada = B1
__init__ = B1
descriptors = C1
properties = C1
private = C2

[Static]
static-class = C1
static-method = C1

[Decorators]
function = C2
class = C2

[Metaclass]
__new__ = C2
metaclass = C2
__metaclass__ = C2

[SuperFunction]
normal = C2

[Slots]
__slots__ = C1

[Atributos]
normal = A2
__class__ = B2
__dict__ = B2

[Exception]
try/except = B1
try/else/except = B1
try/try = B1
try/finally = B1
try/except/finally = B1
try/except/else/finally = B1
raise = B1
assert = B2

[With]
normal = B1
